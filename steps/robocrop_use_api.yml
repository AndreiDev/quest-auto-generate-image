id: robocrop_use_api
learningObjectives:
  - Use openAI API to generate images per request
hints:
  - Try to call the DALL-E API when creating a new product without a product image
  - To use the API, you can either use `HTTP POST` request to `https://api.openai.com/v1/images/generations`. Or install the openAI package inside the backend container - use `docker exec -it anythink-backend-<framework> bash` to get into the backend image and install the openai library
  - Did you extract the open api to environment variable caled OPENAI_API_KEY? Either by adding it to the `docker-compose.yml` or using a .env file. Just make sure you don't commit it to git.
startFlow:
  do:
    - actionId: bot_message
      params:
        person: head-of-rd
        messages:
          - text: "OK, now that we have the key - let's make this happen."
            delay: 700
          - text: "We need to make sure the **backend** automatically generates an image for items that are created without one."
            delay: 800
          - text: "Let's integrate DALL-E into exactly for that. You will need to use [OpenAI API](https://beta.openai.com/docs/guides/images/usage). Make sure to pass the item title as the prompt and set the size to 256x256."
            delay: 1200
          - text: "For using the API, you'll need to use the API key you've just created."
            delay: 2000
          - text: "Oh, and make sure you don't place the key in the code. **Use an environment variable named `OPENAI_API_KEY`instead.**"
            delay: 1200
          - text: "I have to head out for a bit, but just :instruction[create a PR when you're done] and I'll review it."
            delay: 1700
trigger:
  type: github_pr_lifecycle_status
  flowNode:
    switch:
      key: "${eventType}"
      cases:
        github_pr_opened:
          do:
            - actionId: github_pr_comment
              params:
                person: head-of-rd
                message: "On it! I'll review the changes as soon as possible!"
        github_pr_workflow_complete_success:
          if:
            conditions:
              - conditionId: github_does_file_contain
                equals: false
                params:
                  fileName: "backend/models/Item.js"
                  regex: sk-
            then:
              do:
                - actionId: bot_message
                  params:
                    person: head-of-rd
                    messages:
                      - text: Looking good! You can merge the PR now.
                        delay: 1500
                - actionId: github_pr_approve
                  params:
                    person: head-of-rd
                    message: Looking good! You can merge the PR now.
            else:
              do:
                - actionId: bot_message
                  params:
                    person: head-of-rd
                    messages:
                      - text: "Looks like your code has the DALL-E API key embedded in it. That's not the kind of thing we want in our source code. Please use our regular mechanism for passing secrets to production."
                        delay: 1000
                - actionId: github_pr_reject
                  params:
                    person: head-of-rd
                    message: "Looks like your code has the DALL-E API key embedded in it. That's not the kind of thing we want in our source code. Please use our regular mechanism for passing secrets to production."
        github_pr_workflow_complete_failure:
          do:
            - actionId: github_pr_reject
              params:
                person: head-of-rd
                message: Looks like we have a few checks failing. Please try again and make sure they all pass.

            - actionId: bot_message
              params:
                person: head-of-rd
                messages:
                  - text: Looks like we have a few checks failing. Please try again and make sure they all pass.
                    delay: 2500
        github_pr_merged:
          do:
            - actionId: finish_step

githubActions:
  backend:
    capabilities:
      - axios
      - dotenv
    testFile: "backend.js"

solution:
  do:
    - actionId: bot_message
      params:
        person: head-of-rd
      paramsFramework:
        python:
          - messages:
            - text: Alright, first we need to make sure we set up the right environment variable for the API key.
            - text: "Go to the `docker-compose.yml` file, look at the backend service and search for the `environment` section. Add the following line `- OPENAI_API_KEY: YOUR_API_KEY`."
            - text: |
                Now we should install the open ai package. Open a new session in codespace terminal inside the codespace. Then run `docker exec -it anythink-backend-python bash`
                This command opens a new bash session inside the python docker container. 
                Next we should go inside the backend directory. Run `cd backend`.
                And now we can install the package by using `poetry add openai`
            - text: |
                Next, we should make sure the API is called when creating a new product without a product image.
                We can do that by heading over to the `backend/app/api/routes/items/items_resource.py`file, where we handle requests for `/items` route in the server. 
                There we can find the `create_new_item` function which handles `POST` requests for creating new items.
                First, the function checks that the item is not already exists. After this validation - let's add the following logic which is called only when no image was given.
                ```
                    if not item_create.image:
                      response = openai.Image.create(
                          prompt=item_create.title,
                          n=1,
                          size='256x256'
                      )
                      item_create.image = response['data'][0]['url']
                  ```
            - text: |
                Two last things - first we should import the `openai` package, by adding `import openai` in the top of the file. 
                Second, we need to set the openAI key. Therefore we should read the key from the evniroment variable we set earlier.
                You can add the next line in the same file: 
                ```
                openai.api_key = os.getenv('OPENAI_API_KEY')
                ``` 
            - text: Go ahead and implement those changes. Make sure they work locally and open a PR once you're done.

        rails:
            messages:
              - text: Alright, first we need to make sure we set up the right environment variable for the API key.
              - text: "Go to the `docker-compose.yml` file, look at the backend service and search for the `environment` section. Add the following line `- OPENAI_API_KEY: YOUR_API_KEY`."
              - text: |
                  Now we should create a function that will call the API if no image was given. 
                  We can either install the `openai` package, or just use an HTTP request to the api. 
                  If you decide to install the package, you should add the following line to your Gemfile `gem "ruby-openai"`. Then kill the docker container and run `docker-compose up` again to make sure it is installed. 
              - text: |
                  Next, we should make sure the API is called when creating a new product without a product image.
                  You can do that by adding the following code to the `create` method in the `items_controller.rb` file:
                  ```
                    if @item.image.blank?
                      openAIClient = OpenAI::Client.new
                      response = openAIClient.images.generate(
                        parameters: {
                          prompt: @item.title,
                          size: "256x256"
                        }
                      )
                      @item.image = response.dig("data", 0, "url")
                    end
                  ```
                  Don't forget to add `require "ruby/openai"` at the top of the file, if you installed the package.
              - text: |
                  Lastly, we should make sure the API key is configured withing the package.
                  This can be done by creating a new file: `config/initializers/openai.rb` and adding the following code:
                  ```
                    Ruby::OpenAI.configure do |config|
                      config.access_token = ENV['OPENAI_API_KEY']
                    end
                  ```
              - text: Go ahead and implement this changes. Make sure they work locally and open a PR once you're done.

        node:
          messages:
            - text: Alright, first we need to make sure we set up the right environment variable for the API key.
            - text: "Go to the `docker-compose.yml` file, look at the backend service and search for the `environment` section. Add the following line `- OPENAI_API_KEY: YOUR_API_KEY`."
            - text: |
                Now we should create a function that will call the API if no image was given. 
                We can either install the `openai` package, or just use an HTTP request to the api. 
                If you decide to install the package, you should use the docker bash to go inside the container and run `docker exec -it anythink-backend-node bash` then go to the `/backend` directory and run `yarn add openai`
            - text: |
                Let's see another option, using http request:
                ```
                async function generateImage(prompt) {
                  return await axios.post('https://api.openai.com/v1/images/generations', JSON.stringify({
                      'prompt': `${prompt}`,
                      'n': 1,
                      'size': '256x256'
                  }), {
                      headers: {
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
                      }
                  }).then(function (response) {
                      return response.data.data[0].url;
                  })
                      .catch(function (error) {
                          console.log(`Image genrator failed with the error: ${error}`)
                          return '';
                      });
                  }
                ```

            - text: "Last thing to do is call this function only when no image was given"
            - text: "Go ahead an update the relevant route at `backend/routes/api/items.js`"
            - text: |
                Search for the post route which is used to create new items. It should start with `router.post("/", ...` and make to make it async function, since our `generateImage` function is an async. Now it should look like this:
                ```
                router.post("/", auth.required, function(req, res, next) {
                  User.findById(req.payload.id)
                    .then(async function(user) { 
                      ...
                ```
            - text: |
                Now we are left with calling our new generate function when no image is given:
                ```
                var item = new Item(req.body.item);

                item.seller = user;

                if(!item.image) {
                  item.image = await generateImage(item.title);
                }
                ```
            - text: Go ahead and implement those changes. Make sure they work locally and open a PR once you're done.
